Considerations that need to be made.


1. Do I need the bootstrap javascript script?
The only reason I have included it is because of the bootstrap alerts (I'm using alerts to display error messages). You
need javascript to close the alert. However I can just include that functionality in qpanda.js instead of using the full
bootstrap.js. As I type this, I realise that the answer is pretty clear. I should just include the functionality in
qpanda.js.


2. Remove the confirm password input from html form on login?
Regardless of value, any input fields inside a form will be sent along with the POST request. For simplicity/UX I
merged the login and register form. Instead of being separated they are the same form, but clicking the register button
will change the action url to /register/ instead of /login/. But because they are the same form all 3 (the 3rd one being
the confirmpasswordfield) user editable elements will be sent, even when we only need 2 (for login). Logins are going to
occur far more often than registers and removing that 3rd input element will be more bandwidth efficient.

The are 2 possible implementations to remove the 3rd input field:
    a.  In qpanda.js add the 3rd input field to the DOM when the user clicks the register button. This is done client
        side and will also save server bandwidth (very little impact, but still a saving).
    b.  Send all 3 input fields from the server but on clicking the login button have qpanda.js remove the 3rd input
        field, so that it is not sent in the POST request.


3. Convert to naturaltime client side or server side.
When I use AJAX to submit load more answers, should I calculate the natural time (e.g. 3 hours ago) server side or
client side? Oringally I thought to convert it client side but decided against it in case the user had blocked
javascript functionality? Reasonable, right? Nope. AJAX, the name of a cleaning product and also stands for Asynchronous
Javascript and XML. So that was silly of me to think of converting the time server side. So regardless, I know that the
user has javascript functionality if they submet an AJAX request, however it reminded me that I need my website to work
even when javascript is disabled. I'll still push this commit with the naturaltime conversion happening server side, and
hopefully come back to making that conversion client side. But important features, i.e. registration DOES NOT work
without javascript.

3b. Building website for clients without javascript.
Apparently there is still a significant number of users who do not have javascript enabled (around 1%). Those numbers
were for the guardian, and lots of those views came from screen readers. However, I think I need to choose whether I'm
going to support that 1%. This is 1% of a hobby project which I expect to get 0 visitors, but still. I wouldn't need to
change much right now if I were to make it work javascript-less, but I might need to in the future.

The change I'm thinking of right now is to wrap the register button in <a> tags and load the /register/ page that is
designed to work without js.

The more I think about it, the more complicated it seems to get. I need to pour serious though into this. More than the
10 minutes I have so far. So right now I'm undecided, but I feel like I'm leaning to the idea of not supporting js-less
clients.

n - 1. Encrypting secret questions?
It's numbered n-1, because this consideration is well in the future. However the idea is whether or not I should encrypt
the question and answer data for a protected question. If a user chooses to ask a protected question (which requires the
user to provide a key) should we use that key to encrypt the data too. I don't want to store the key server side, so
on every request we would decrypt the data using the key (how would we know whether it was successfully decrypted?).

